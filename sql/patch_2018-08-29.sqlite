
-- ---------------------------------------------------------------------------------------------------

CREATE TEMPORARY VIEW exp_ver AS SELECT "94" AS expected_version;

.bail ON

SELECT ('The patch only applies to schema version '
    || expected_version
    || ', but the current schema version is '
    || meta_value
    || ', skipping the rest.') AS ''
    FROM hive_meta JOIN exp_ver WHERE meta_key='hive_sql_schema_version' AND meta_value<>expected_version;

INSERT INTO hive_meta (meta_key, meta_value)
    SELECT hm.* FROM hive_meta AS hm JOIN exp_ver WHERE meta_key='hive_sql_schema_version' AND meta_value<>expected_version;

SELECT ('The patch seems to be compatible with schema version '
    || expected_version
    || ', applying the patch...') AS '' FROM exp_ver;


-- ----------------------------------<actual_patch> -------------------------------------------------


DROP VIEW IF EXISTS resource_usage_stats;
CREATE VIEW IF NOT EXISTS resource_usage_stats AS
    SELECT a.logic_name || '(' || a.analysis_id || ')' analysis,
           w.meadow_type,
           rc.name || '(' || rc.resource_class_id || ')' resource_class,
           u.exit_status,
           count(*) workers,
           min(mem_megs) AS min_mem_megs, round(avg(mem_megs),2) AS avg_mem_megs, max(mem_megs) AS max_mem_megs,
           round(min(cpu_sec/lifespan_sec),2) AS min_cpu_perc, round(avg(cpu_sec/lifespan_sec),2) AS avg_cpu_perc, round(max(cpu_sec/lifespan_sec),2) AS max_cpu_perc
    FROM resource_class rc
    JOIN analysis_base a USING(resource_class_id)
    LEFT JOIN role r USING(analysis_id)
    LEFT JOIN worker w USING(worker_id)
    LEFT JOIN worker_resource_usage u USING (worker_id)
    GROUP BY a.analysis_id, w.meadow_type, rc.resource_class_id, u.exit_status
    ORDER BY a.analysis_id, w.meadow_type, rc.resource_class_id, u.exit_status;

DROP VIEW IF EXISTS job_semaphores;
CREATE VIEW IF NOT EXISTS job_semaphores AS
    SELECT c_ab.logic_name AS controlling_logic_name, s_ab.logic_name as semaphored_logic_name,
           c_j.job_id as controlling_job_id,
           (s.local_jobs_counter + s.remote_jobs_counter) AS semaphore_count,
           s.dependent_job_id AS semaphored_job_id, s.dependent_semaphore_url
    FROM semaphore s
    LEFT JOIN job c_j ON s.semaphore_id = c_j.controlled_semaphore_id
    LEFT JOIN analysis_base c_ab ON c_ab.analysis_id = c_j.analysis_id
    LEFT JOIN job s_j ON s_j.job_id = s.dependent_job_id
    LEFT JOIN analysis_base s_ab ON s_ab.analysis_id = s_j.analysis_id;


-- ----------------------------------</actual_patch> -------------------------------------------------


    -- increase the schema version by one and register the patch:
UPDATE hive_meta SET meta_value=meta_value+1 WHERE meta_key='hive_sql_schema_version';
INSERT INTO hive_meta (meta_key, meta_value) SELECT 'patched_to_' || meta_value, CURRENT_TIMESTAMP FROM hive_meta WHERE meta_key = 'hive_sql_schema_version';
